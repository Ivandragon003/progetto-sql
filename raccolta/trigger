
CREATE OR REPLACE FUNCTION checkRistorante()
RETURNS TRIGGER AS $$
DECLARE
    cont INTEGER;
BEGIN
    SELECT COUNT(*) INTO cont
    FROM lavora
    WHERE idRistorante = OLD.idRistorante
      AND codFiscale <> OLD.codFiscale;

    IF cont = 0 THEN
        RAISE EXCEPTION 'Non puoi lasciare il ristorante % senza chef.', OLD.idRistorante;
    END IF;

    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_checkRistorante
BEFORE DELETE ON lavora
FOR EACH ROW
EXECUTE FUNCTION checkRistorante();

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

CREATE OR REPLACE FUNCTION checkCorsoUtente() 
RETURNS TRIGGER AS $$
DECLARE 
	cont INT ;
BEGIN 
	SELECT COUNT(*) INTO cont
	FROM iscritto
	WHERE idCorsoCucina <>idCorsoCucina ;
	IF cont = 0 THEN
        DELETE FROM corsoCucina WHERE idCorsoCucina = OLD.idCorsoCucina;
    END IF;

    RETURN NULL; 
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trg_checkCorsoUtente
AFTER DELETE ON iscritto 
FOR EACH ROW
EXECUTE FUNCTION checkCorsoUtente();



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

CREATE OR REPLACE FUNCTION checkIntervalloSessione()
RETURNS TRIGGER AS $$
DECLARE
    inizio_corso TIMESTAMP;
    fine_corso   TIMESTAMP;
BEGIN
    SELECT dataInizioCorso, dataFineCorso
    INTO inizio_corso, fine_corso
    FROM corsoCucina
    WHERE idCorsoCucina = NEW.idCorsoCucina;

    IF NOT (
        inizio_corso <= NEW.dataInizioSessione AND NEW.dataFineSessione <= fine_corso) THEN
        RAISE EXCEPTION 
            'Le date della sessione (% → %) devono essere comprese nell’intervallo del corso (% → %)',
            NEW.dataInizioSessione, NEW.dataFineSessione, inizio_corso, fine_corso;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trg_checkIntervalloSessione
BEFORE INSERT OR UPDATE ON Sessione
FOR EACH ROW
EXECUTE FUNCTION checkIntervalloSessione();


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
CREATE OR REPLACE FUNCTION checkPostiCorso()
RETURNS TRIGGER AS $$
DECLARE
    max_posti INT;
    numeroIscritti INT;
BEGIN
    SELECT numeroPosti INTO max_posti
    FROM corsoCucina
    WHERE idCorsoCucina = NEW.idCorsoCucina;

    SELECT COUNT(*) INTO numeroIscritti
    FROM iscritto
    WHERE idCorsoCucina = NEW.idCorsoCucina AND stato = TRUE;

    IF numeroIscritti >= max_posti THEN
        NEW.stato := FALSE;  
    ELSE
        NEW.stato := TRUE;  
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_checkPostiCorso
BEFORE INSERT ON iscritto
FOR EACH ROW
EXECUTE FUNCTION checkPostiCorso();


/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE OR REPLACE FUNCTION cucinaRicetta ()
RETURNS TRIGGERS AS $$
DECLARE
	conta_ricette INT;
BEGIN
	SELECT COUNT(*) INTO conta_ricette
	FROM ricetta
	WHERE IdSessione = NEW.IdSessione;

	IF NEW.tipo = 'inPresenza' THEN
		IF conta_ricette = 0 THEN
			RAISE EXCEPTION 
			'Errore: una sessione in presenza deve avere almeno una ricetta associata';
		END IF;

	ELSIF NEW.tipo = 'online' THEN
		IF conta_ricette > 0  THEN
			RAISE EXCEPTION
			'Errore: una sessione online non può avere ricette associate';
		END IF;
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE plpgsql; 
		


